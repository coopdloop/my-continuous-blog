name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.css'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.css'
      - 'docs/**'

permissions:
  contents: read
  id-token: write # This is required for requesting the JWT
  issues: write
  pull-requests: write

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      - name: Check for code changes
        id: check
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changes.txt
          if grep -qvE '(\.css|\.md|docs/)' changes.txt; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  pre-commit:
    needs: check_changes
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Install pre-commit
      run: pip install pre-commit
    - name: Run pre-commit
      run: pre-commit run --all-files

  TruffleHog:
    needs: check_changes
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified

      - name: Scan Results Status
        if: steps.trufflehog.outcome == 'failure'
        run: exit 1

  build-test-sast:
    needs: [pre-commit, TruffleHog, check_changes]
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.14.2, 18.15.0, 18.17.1 ]
    name: Build, Test, and Scan (Node ${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build application
        run: npm run build
      # - name: Run tests
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test

  determine-latest-node:
    needs: [build-test-sast, check_changes]
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    outputs:
      latest_node: ${{ steps.set-latest-node.outputs.latest_node }}
    steps:
      - name: Set latest Node.js version
        id: set-latest-node
        run: |
          VERSIONS=(18.14.2 18.15.0 18.17.1)
          LATEST=${VERSIONS[-1]}
          echo "latest_node=$LATEST" >> $GITHUB_OUTPUT
